{"version":3,"sources":["sha512-compiled.js"],"names":[],"mappings":"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","file":"sha512-compiled-compiled.js","sourcesContent":["\"use strict\";\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-512, as defined\n * in FIPS 180-2\n * Version 2.2 Copyright Anonymous Contributor, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/*\n * Configurable variables. You may need to tweak these to be compatible with\n * the server-side, but the defaults work in most cases.\n */\nvar hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nfunction hex_sha512(s) {\n    return rstr2hex(rstr_sha512(str2rstr_utf8(s)));\n}\nfunction b64_sha512(s) {\n    return rstr2b64(rstr_sha512(str2rstr_utf8(s)));\n}\nfunction any_sha512(s, e) {\n    return rstr2any(rstr_sha512(str2rstr_utf8(s)), e);\n}\nfunction hex_hmac_sha512(k, d) {\n    return rstr2hex(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction b64_hmac_sha512(k, d) {\n    return rstr2b64(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d)));\n}\nfunction any_hmac_sha512(k, d, e) {\n    return rstr2any(rstr_hmac_sha512(str2rstr_utf8(k), str2rstr_utf8(d)), e);\n}\n\n/*\n * Perform a simple self-test to see if the VM is working\n */\nfunction sha512_vm_test() {\n    return hex_sha512(\"abc\").toLowerCase() == \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" + \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\";\n}\n\n/*\n * Calculate the SHA-512 of a raw string\n */\nfunction rstr_sha512(s) {\n    return binb2rstr(binb_sha512(rstr2binb(s), s.length * 8));\n}\n\n/*\n * Calculate the HMAC-SHA-512 of a key and some data (raw strings)\n */\nfunction rstr_hmac_sha512(key, data) {\n    var bkey = rstr2binb(key);\n    if (bkey.length > 32) bkey = binb_sha512(bkey, key.length * 8);\n\n    var ipad = Array(32),\n        opad = Array(32);\n    for (var i = 0; i < 32; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = binb_sha512(ipad.concat(rstr2binb(data)), 1024 + data.length * 8);\n    return binb2rstr(binb_sha512(opad.concat(hash), 1024 + 512));\n}\n\n/*\n * Convert a raw string to a hex string\n */\nfunction rstr2hex(input) {\n    try {\n        hexcase;\n    } catch (e) {\n        hexcase = 0;\n    }\n    var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n    var output = \"\";\n    var x;\n    for (var i = 0; i < input.length; i++) {\n        x = input.charCodeAt(i);\n        output += hex_tab.charAt(x >>> 4 & 0x0F) + hex_tab.charAt(x & 0x0F);\n    }\n    return output;\n}\n\n/*\n * Convert a raw string to a base-64 string\n */\nfunction rstr2b64(input) {\n    try {\n        b64pad;\n    } catch (e) {\n        b64pad = '';\n    }\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var output = \"\";\n    var len = input.length;\n    for (var i = 0; i < len; i += 3) {\n        var triplet = input.charCodeAt(i) << 16 | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);\n        for (var j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > input.length * 8) output += b64pad;else output += tab.charAt(triplet >>> 6 * (3 - j) & 0x3F);\n        }\n    }\n    return output;\n}\n\n/*\n * Convert a raw string to an arbitrary string encoding\n */\nfunction rstr2any(input, encoding) {\n    var divisor = encoding.length;\n    var i, j, q, x, quotient;\n\n    /* Convert to an array of 16-bit big-endian values, forming the dividend */\n    var dividend = Array(Math.ceil(input.length / 2));\n    for (i = 0; i < dividend.length; i++) {\n        dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);\n    }\n\n    /*\n     * Repeatedly perform a long division. The binary array forms the dividend,\n     * the length of the encoding is the divisor. Once computed, the quotient\n     * forms the dividend for the next step. All remainders are stored for later\n     * use.\n     */\n    var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));\n    var remainders = Array(full_length);\n    for (j = 0; j < full_length; j++) {\n        quotient = Array();\n        x = 0;\n        for (i = 0; i < dividend.length; i++) {\n            x = (x << 16) + dividend[i];\n            q = Math.floor(x / divisor);\n            x -= q * divisor;\n            if (quotient.length > 0 || q > 0) quotient[quotient.length] = q;\n        }\n        remainders[j] = x;\n        dividend = quotient;\n    }\n\n    /* Convert the remainders to the output string */\n    var output = \"\";\n    for (i = remainders.length - 1; i >= 0; i--) {\n        output += encoding.charAt(remainders[i]);\n    }return output;\n}\n\n/*\n * Encode a string as utf-8.\n * For efficiency, this assumes the input is valid utf-16.\n */\nfunction str2rstr_utf8(input) {\n    var output = \"\";\n    var i = -1;\n    var x, y;\n\n    while (++i < input.length) {\n        /* Decode utf-16 surrogate pairs */\n        x = input.charCodeAt(i);\n        y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\n        if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {\n            x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\n            i++;\n        }\n\n        /* Encode output as utf-8 */\n        if (x <= 0x7F) output += String.fromCharCode(x);else if (x <= 0x7FF) output += String.fromCharCode(0xC0 | x >>> 6 & 0x1F, 0x80 | x & 0x3F);else if (x <= 0xFFFF) output += String.fromCharCode(0xE0 | x >>> 12 & 0x0F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);else if (x <= 0x1FFFFF) output += String.fromCharCode(0xF0 | x >>> 18 & 0x07, 0x80 | x >>> 12 & 0x3F, 0x80 | x >>> 6 & 0x3F, 0x80 | x & 0x3F);\n    }\n    return output;\n}\n\n/*\n * Encode a string as utf-16\n */\nfunction str2rstr_utf16le(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length; i++) {\n        output += String.fromCharCode(input.charCodeAt(i) & 0xFF, input.charCodeAt(i) >>> 8 & 0xFF);\n    }return output;\n}\n\nfunction str2rstr_utf16be(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length; i++) {\n        output += String.fromCharCode(input.charCodeAt(i) >>> 8 & 0xFF, input.charCodeAt(i) & 0xFF);\n    }return output;\n}\n\n/*\n * Convert a raw string to an array of big-endian words\n * Characters >255 have their high-byte silently ignored.\n */\nfunction rstr2binb(input) {\n    var output = Array(input.length >> 2);\n    for (var i = 0; i < output.length; i++) {\n        output[i] = 0;\n    }for (var i = 0; i < input.length * 8; i += 8) {\n        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << 24 - i % 32;\n    }return output;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2rstr(input) {\n    var output = \"\";\n    for (var i = 0; i < input.length * 32; i += 8) {\n        output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 0xFF);\n    }return output;\n}\n\n/*\n * Calculate the SHA-512 of an array of big-endian dwords, and a bit length\n */\nvar sha512_k;\nfunction binb_sha512(x, len) {\n    if (sha512_k == undefined) {\n        //SHA512 constants\n        sha512_k = new Array(new int64(0x428a2f98, -685199838), new int64(0x71374491, 0x23ef65cd), new int64(-1245643825, -330482897), new int64(-373957723, -2121671748), new int64(0x3956c25b, -213338824), new int64(0x59f111f1, -1241133031), new int64(-1841331548, -1357295717), new int64(-1424204075, -630357736), new int64(-670586216, -1560083902), new int64(0x12835b01, 0x45706fbe), new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, -704662302), new int64(0x72be5d74, -226784913), new int64(-2132889090, 0x3b1696b1), new int64(-1680079193, 0x25c71235), new int64(-1046744716, -815192428), new int64(-459576895, -1628353838), new int64(-272742522, 0x384f25e3), new int64(0xfc19dc6, -1953704523), new int64(0x240ca1cc, 0x77ac9c65), new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483), new int64(0x5cb0a9dc, -1119749164), new int64(0x76f988da, -2096016459), new int64(-1740746414, -295247957), new int64(-1473132947, 0x2db43210), new int64(-1341970488, -1728372417), new int64(-1084653625, -1091629340), new int64(-958395405, 0x3da88fc2), new int64(-710438585, -1828018395), new int64(0x6ca6351, -536640913), new int64(0x14292967, 0xa0e6e70), new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926), new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, -1651133473), new int64(0x650a7354, -1951439906), new int64(0x766a0abb, 0x3c77b2a8), new int64(-2117940946, 0x47edaee6), new int64(-1838011259, 0x1482353b), new int64(-1564481375, 0x4cf10364), new int64(-1474664885, -1136513023), new int64(-1035236496, -789014639), new int64(-949202525, 0x654be30), new int64(-778901479, -688958952), new int64(-694614492, 0x5565a910), new int64(-200395387, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8), new int64(0x19a4c116, -1194143544), new int64(0x1e376c08, 0x5141ab53), new int64(0x2748774c, -544281703), new int64(0x34b0bcb5, -509917016), new int64(0x391c0cb3, -976659869), new int64(0x4ed8aa4a, -482243893), new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, -692930397), new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60), new int64(-2067236844, -1578062990), new int64(-1933114872, 0x1a6439ec), new int64(-1866530822, 0x23631e28), new int64(-1538233109, -561857047), new int64(-1090935817, -1295615723), new int64(-965641998, -479046869), new int64(-903397682, -366583396), new int64(-779700025, 0x21c0c207), new int64(-354779690, -840897762), new int64(-176337025, -294727304), new int64(0x6f067aa, 0x72176fba), new int64(0xa637dc5, -1563912026), new int64(0x113f9804, -1090974290), new int64(0x1b710b35, 0x131c471b), new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493), new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, -1676669620), new int64(0x4cc5d4be, -885112138), new int64(0x597f299c, -60457430), new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817));\n    }\n\n    //Initial hash values\n    var H = new Array(new int64(0x6a09e667, -205731576), new int64(-1150833019, -2067093701), new int64(0x3c6ef372, -23791573), new int64(-1521486534, 0x5f1d36f1), new int64(0x510e527f, -1377402159), new int64(-1694144372, 0x2b3e6c1f), new int64(0x1f83d9ab, -79577749), new int64(0x5be0cd19, 0x137e2179));\n\n    var T1 = new int64(0, 0),\n        T2 = new int64(0, 0),\n        a = new int64(0, 0),\n        b = new int64(0, 0),\n        c = new int64(0, 0),\n        d = new int64(0, 0),\n        e = new int64(0, 0),\n        f = new int64(0, 0),\n        g = new int64(0, 0),\n        h = new int64(0, 0),\n\n    //Temporary variables not specified by the document\n    s0 = new int64(0, 0),\n        s1 = new int64(0, 0),\n        Ch = new int64(0, 0),\n        Maj = new int64(0, 0),\n        r1 = new int64(0, 0),\n        r2 = new int64(0, 0),\n        r3 = new int64(0, 0);\n    var j, i;\n    var W = new Array(80);\n    for (i = 0; i < 80; i++) {\n        W[i] = new int64(0, 0);\n    } // append padding to the source string. The format is described in the FIPS.\n    x[len >> 5] |= 0x80 << 24 - (len & 0x1f);\n    x[(len + 128 >> 10 << 5) + 31] = len;\n\n    for (i = 0; i < x.length; i += 32) //32 dwords is the block size\n    {\n        int64copy(a, H[0]);\n        int64copy(b, H[1]);\n        int64copy(c, H[2]);\n        int64copy(d, H[3]);\n        int64copy(e, H[4]);\n        int64copy(f, H[5]);\n        int64copy(g, H[6]);\n        int64copy(h, H[7]);\n\n        for (j = 0; j < 16; j++) {\n            W[j].h = x[i + 2 * j];\n            W[j].l = x[i + 2 * j + 1];\n        }\n\n        for (j = 16; j < 80; j++) {\n            //sigma1\n            int64rrot(r1, W[j - 2], 19);\n            int64revrrot(r2, W[j - 2], 29);\n            int64shr(r3, W[j - 2], 6);\n            s1.l = r1.l ^ r2.l ^ r3.l;\n            s1.h = r1.h ^ r2.h ^ r3.h;\n            //sigma0\n            int64rrot(r1, W[j - 15], 1);\n            int64rrot(r2, W[j - 15], 8);\n            int64shr(r3, W[j - 15], 7);\n            s0.l = r1.l ^ r2.l ^ r3.l;\n            s0.h = r1.h ^ r2.h ^ r3.h;\n\n            int64add4(W[j], s1, W[j - 7], s0, W[j - 16]);\n        }\n\n        for (j = 0; j < 80; j++) {\n            //Ch\n            Ch.l = e.l & f.l ^ ~e.l & g.l;\n            Ch.h = e.h & f.h ^ ~e.h & g.h;\n\n            //Sigma1\n            int64rrot(r1, e, 14);\n            int64rrot(r2, e, 18);\n            int64revrrot(r3, e, 9);\n            s1.l = r1.l ^ r2.l ^ r3.l;\n            s1.h = r1.h ^ r2.h ^ r3.h;\n\n            //Sigma0\n            int64rrot(r1, a, 28);\n            int64revrrot(r2, a, 2);\n            int64revrrot(r3, a, 7);\n            s0.l = r1.l ^ r2.l ^ r3.l;\n            s0.h = r1.h ^ r2.h ^ r3.h;\n\n            //Maj\n            Maj.l = a.l & b.l ^ a.l & c.l ^ b.l & c.l;\n            Maj.h = a.h & b.h ^ a.h & c.h ^ b.h & c.h;\n\n            int64add5(T1, h, s1, Ch, sha512_k[j], W[j]);\n            int64add(T2, s0, Maj);\n\n            int64copy(h, g);\n            int64copy(g, f);\n            int64copy(f, e);\n            int64add(e, d, T1);\n            int64copy(d, c);\n            int64copy(c, b);\n            int64copy(b, a);\n            int64add(a, T1, T2);\n        }\n        int64add(H[0], H[0], a);\n        int64add(H[1], H[1], b);\n        int64add(H[2], H[2], c);\n        int64add(H[3], H[3], d);\n        int64add(H[4], H[4], e);\n        int64add(H[5], H[5], f);\n        int64add(H[6], H[6], g);\n        int64add(H[7], H[7], h);\n    }\n\n    //represent the hash as an array of 32-bit dwords\n    var hash = new Array(16);\n    for (i = 0; i < 8; i++) {\n        hash[2 * i] = H[i].h;\n        hash[2 * i + 1] = H[i].l;\n    }\n    return hash;\n}\n\n//A constructor for 64-bit numbers\nfunction int64(h, l) {\n    this.h = h;\n    this.l = l;\n    //this.toString = int64toString;\n}\n\n//Copies src into dst, assuming both are 64-bit numbers\nfunction int64copy(dst, src) {\n    dst.h = src.h;\n    dst.l = src.l;\n}\n\n//Right-rotates a 64-bit number by shift\n//Won't handle cases of shift>=32\n//The function revrrot() is for that\nfunction int64rrot(dst, x, shift) {\n    dst.l = x.l >>> shift | x.h << 32 - shift;\n    dst.h = x.h >>> shift | x.l << 32 - shift;\n}\n\n//Reverses the dwords of the source and then rotates right by shift.\n//This is equivalent to rotation by 32+shift\nfunction int64revrrot(dst, x, shift) {\n    dst.l = x.h >>> shift | x.l << 32 - shift;\n    dst.h = x.l >>> shift | x.h << 32 - shift;\n}\n\n//Bitwise-shifts right a 64-bit number by shift\n//Won't handle shift>=32, but it's never needed in SHA512\nfunction int64shr(dst, x, shift) {\n    dst.l = x.l >>> shift | x.h << 32 - shift;\n    dst.h = x.h >>> shift;\n}\n\n//Adds two 64-bit numbers\n//Like the original implementation, does not rely on 32-bit operations\nfunction int64add(dst, x, y) {\n    var w0 = (x.l & 0xffff) + (y.l & 0xffff);\n    var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);\n    var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);\n    var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);\n    dst.l = w0 & 0xffff | w1 << 16;\n    dst.h = w2 & 0xffff | w3 << 16;\n}\n\n//Same, except with 4 addends. Works faster than adding them one by one.\nfunction int64add4(dst, a, b, c, d) {\n    var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff);\n    var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (w0 >>> 16);\n    var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (w1 >>> 16);\n    var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (w2 >>> 16);\n    dst.l = w0 & 0xffff | w1 << 16;\n    dst.h = w2 & 0xffff | w3 << 16;\n}\n\n//Same, except with 5 addends\nfunction int64add5(dst, a, b, c, d, e) {\n    var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff);\n    var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16);\n    var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16);\n    var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);\n    dst.l = w0 & 0xffff | w1 << 16;\n    dst.h = w2 & 0xffff | w3 << 16;\n}\n\n//# sourceMappingURL=sha512-compiled.js.map"]}